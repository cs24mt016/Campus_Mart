{\rtf1\ansi\ansicpg1252\cocoartf2818
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\froman\fcharset0 Times-Roman;}
{\colortbl;\red255\green255\blue255;\red0\green0\blue0;}
{\*\expandedcolortbl;;\cssrgb\c0\c0\c0;}
\paperw11900\paperh16840\margl1440\margr1440\vieww28600\viewh18000\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 How to create a database?\
\
Use mysql workbench server.\
\
# creation of a database\
CREATE DATABASE CampusMart;\
USE CampusMart;\
\
\
#5 tables\
\
#`1\
CREATE TABLE Users (
    userID INT AUTO_INCREMENT PRIMARY KEY,
    name VARCHAR(255) NOT NULL,
    email VARCHAR(255) UNIQUE NOT NULL,
    department VARCHAR(100),
    passwordHash VARCHAR(255) NOT NULL,
    userType ENUM('Student', 'Faculty', 'Staff') NOT NULL,
    phoneNumber VARCHAR(15),  -- Adding the phone number column
    createdAt TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updatedAt TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
);

\
\
#2\
CREATE TABLE Categories (
    categoryID INT AUTO_INCREMENT PRIMARY KEY,
    name VARCHAR(100) NOT NULL,
    description TEXT
);

\
#3\
CREATE TABLE Listings (
    listingID INT AUTO_INCREMENT PRIMARY KEY,
    userID INT,
    title VARCHAR(255) NOT NULL,
    description TEXT NOT NULL,
    selling_price DECIMAL(10, 2) NOT NULL,
    new_item_price DECIMAL(10, 2),
    categoryID INT,
    grade INT CHECK (condition >= 1 AND condition <= 5),  -- Condition on a scale of 1 to 5
    createdAt TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updatedAt TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    isActive BOOLEAN DEFAULT TRUE,
    FOREIGN KEY (userID) REFERENCES Users(userID) ON DELETE CASCADE,
    FOREIGN KEY (categoryID) REFERENCES Categories(categoryID) ON DELETE SET NULL
);

\
#4\
CREATE TABLE Transactions (
    transactionID INT AUTO_INCREMENT PRIMARY KEY,
    buyerID INT,
    sellerID INT,
    listingID INT,
    amount DECIMAL(10, 2) NOT NULL,
    status ENUM('Pending', 'Completed', 'Disputed') DEFAULT 'Pending',
    createdAt TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updatedAt TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    FOREIGN KEY (buyerID) REFERENCES Users(userID) ON DELETE CASCADE,
    FOREIGN KEY (sellerID) REFERENCES Users(userID) ON DELETE CASCADE,
    FOREIGN KEY (listingID) REFERENCES Listings(listingID) ON DELETE CASCADE
);

#4\
CREATE TABLE Messages (
    messageID INT AUTO_INCREMENT PRIMARY KEY,
    senderID INT,
    receiverID INT,
    content TEXT NOT NULL,
    createdAt TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (senderID) REFERENCES Users(userID) ON DELETE CASCADE,
    FOREIGN KEY (receiverID) REFERENCES Users(userID) ON DELETE CASCADE
);


#5\
CREATE TABLE Ratings (
    ratingID INT AUTO_INCREMENT PRIMARY KEY,
    transactionID INT,
    raterID INT,   -- The user giving the rating
    rateeID INT,   -- The user being rated
    rating TINYINT CHECK (rating BETWEEN 1 AND 5), -- Rating on a 5-point scale
    feedback TEXT,
    createdAt TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (transactionID) REFERENCES Transactions(transactionID) ON DELETE CASCADE,
    FOREIGN KEY (raterID) REFERENCES Users(userID) ON DELETE CASCADE,
    FOREIGN KEY (rateeID) REFERENCES Users(userID) ON DELETE CASCADE
);


\'97\'97using \
\pard\pardeftab720\partightenfactor0

\f1 \cf0 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 INSERT INTO Ratings (transactionID, raterID, rateeID, rating, feedback) VALUES (1, 1, 2, 5, 'Great seller, very responsive and trustworthy.');
\f0 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 \'97 queuing\
SELECT rateeID, AVG(rating) AS avgRating\
FROM Ratings\
WHERE rateeID = 2;\
\
Displaying user rating\
SELECT L.title, L.description, L.price, U.name AS seller, AVG(R.rating) AS sellerRating\
FROM Listings L\
JOIN Users U ON L.userID = U.userID\
LEFT JOIN Ratings R ON U.userID = R.rateeID\
WHERE L.listingID = 1\
GROUP BY L.listingID;\
\
\
\
#################\
Indexing and optimise queries\
CREATE INDEX idx_userID ON Listings(userID);
CREATE INDEX idx_buyerID ON Transactions(buyerID);
CREATE INDEX idx_sellerID ON Transactions(sellerID);
\
\
\
## how to insert small data\
INSERT INTO Categories (name, description) VALUES\
('Books', 'Academic and recreational books'),\
('Electronics', 'Phones, laptops, and gadgets'),\
('Furniture', 'Desks, chairs, and more'),\
('Cycles', 'Bicycles for on-campus commute');\
\
INSERT INTO Users (name, email, department, passwordHash, userType) VALUES\
('John Doe', 'john@iit.ac.in', 'CSE', SHA2('password123', 256), 'Student'),\
('Jane Smith', 'jane@iit.ac.in', 'Mechanical', SHA2('mypassword', 256), 'Faculty');\
\
\
\
#############writing queries\
\'97\'97 post a listing\
INSERT INTO Listings (userID, title, description, price, categoryID)\
VALUES (1, 'Physics Textbook', 'Advanced Physics book in good condition', 500, 1);\
\
\
\'97\'97  searching will be like this\
SELECT * FROM Listings WHERE title LIKE '%Physics%' AND isActive = TRUE;\
\
\
\'97\'97 veiwing the transaction history\
SELECT * FROM Transactions WHERE buyerID = 1 OR sellerID = 1;\
\
\
\
\
\
######ADVANCE STUFF\
TRiGGERS\
\
Mark transaction as completed \
CREATE TRIGGER complete_transaction_after_rating\
AFTER INSERT ON Ratings\
FOR EACH ROW\
BEGIN\
   UPDATE Transactions\
   SET status = 'Completed'\
   WHERE transactionID = NEW.transactionID;\
END;\
\
\
\'97 making listing as inactive\
CREATE TRIGGER set_listing_inactive_after_transaction\
AFTER UPDATE ON Transactions\
FOR EACH ROW\
BEGIN\
   IF NEW.status = 'Completed' THEN\
      UPDATE Listings\
      SET isActive = FALSE\
      WHERE listingID = NEW.listingID;\
   END IF;\
END;\
\
####################chats and history\
flask**\
from flask import jsonify, session\
import MySQLdb\
\
@app.route('/chat-partners', methods=['GET'])\
def get_chat_partners():\
    current_user_id = session['user_id']  # Assuming you store logged-in user ID in session\
\
    # SQL query to fetch distinct chat partners\
    query = """\
        SELECT DISTINCT \
            CASE \
                WHEN SenderID = %s THEN ReceiverID\
                ELSE SenderID\
            END AS ChatPartnerID\
        FROM Messages\
        WHERE SenderID = %s OR ReceiverID = %s;\
    """\
\
    db = MySQLdb.connect(...)  # Your DB connection\
    cursor = db.cursor()\
    cursor.execute(query, (current_user_id, current_user_id, current_user_id))\
    chat_partners = cursor.fetchall()\
\
    return jsonify(chat_partners)\
%%%%%histroy of specific user\
@app.route('/chat-history/<chat_partner_id>', methods=['GET'])\
def get_chat_history(chat_partner_id):\
    current_user_id = session['user_id']  # Assuming you store logged-in user ID in session\
\
    # SQL query to fetch chat history\
    query = """\
        SELECT SenderID, ReceiverID, ProductID, MessageContent, Timestamp\
        FROM Messages\
        WHERE (SenderID = %s AND ReceiverID = %s)\
           OR (SenderID = %s AND ReceiverID = %s)\
        ORDER BY Timestamp ASC;\
    """\
\
    db = MySQLdb.connect(...)  # Your DB connection\
    cursor = db.cursor()\
    cursor.execute(query, (current_user_id, chat_partner_id, chat_partner_id, current_user_id))\
    chat_history = cursor.fetchall()\
\
    return jsonify(chat_history)\
}